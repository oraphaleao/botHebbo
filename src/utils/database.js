// src/utils/database.js
const { Sequelize, DataTypes } = require("sequelize");
const config = require("../config");

// Conex칚o com o banco de dados
const sequelize = new Sequelize(process.env.DB_NAME, process.env.DB_USER, process.env.DB_PASS, {
    host: process.env.DB_HOST,
    dialect: process.env.DB_DIALECT,
    logging: false,
});

// Modelo da tabela de usu치rios
const User = sequelize.define("users", {
    motto: {
        type: DataTypes.STRING,
        allowNull: true,  // O campo 'motto' pode ser nulo, pois nem todos os usu치rios podem ter um valor
    },
    username: {
        type: DataTypes.STRING,
        allowNull: false,
    },
    invite_discord: {
        type: DataTypes.INTEGER,
        defaultValue: 0
    }
}, {
    timestamps: false
});

// Sincroniza o banco (Cria a tabela se n칚o existir)
sequelize.sync();

// Fun칞칚o para verificar o motto (token) do usu치rio
async function verifyMotto(motto) {
    // Procurando no banco de dados pela coluna 'motto'
    const user = await User.findOne({ where: { motto } });
    return user ? user : null; // Retorna os dados do usu치rio, caso encontrado
}

// 游늵 Buscar contagem de convites do usu치rio que convidou
async function getInviterData(inviterId) {
    return await User.findOne({ where: { id: inviterId } });
}

// 游늷 Criar um novo registro se o usu치rio ainda n칚o existir
async function createInviterData(inviterId) {
    return await User.create({ id: inviterId, invite_discord: 1 });
}

// 游늳 Atualizar o n칰mero de convites do usu치rio
async function updateInviterData(inviterId) {
    const user = await User.findOne({ where: { id: inviterId } });
    if (user) {
        await user.increment("invite_discord");
    } else {
        await User.create({ id: inviterId, invite_discord: 1 });
    }
}

module.exports = { verifyMotto, getInviterData, createInviterData, updateInviterData };
